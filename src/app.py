from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel, Field
from typing import Optional
import pandas as pd
import joblib
from src.data_loader import preprocess_data

app = FastAPI(title="Salary Predictor")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("models/model.joblib")


# üéØ –ú–æ–¥–µ–ª—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class VacancyFeatures(BaseModel):
    employees_number: int
    work_schedule: str
    employment: str
    length_of_employment: float
    region_name: str
    accept_teenagers: bool
    specialization: str
    response_count: int
    invitation_count: int
    month: int = Field(..., ge=1, le=12)
    day_of_week: int = Field(..., ge=0, le=6)
    industry: Optional[str] = None


@app.post("/predict")
def predict(data: VacancyFeatures):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ DataFrame
    df_raw = pd.DataFrame([data.dict()])

    try:
        X, _ = preprocess_data(df_raw)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    try:
        pred = model.predict(X)[0]
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")

    return {"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞": round(pred, 2)}


@app.get("/report")
def get_report():
    return FileResponse("report.html", media_type="text/html")
