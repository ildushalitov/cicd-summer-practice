name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: üîÑ Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (flake8)
        run: |
          pip install flake8
          flake8 src tests

      - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (pytest)
        run: |
          pip install pytest
          pytest -s tests

      - name: ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (src/train.py)
        run: python src/train.py

      - name: üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        uses: actions/upload-artifact@v4
        with:
          name: model
          path: models/model.joblib

      - name: üîÆ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏ (src/inference.py)
        run: python src/inference.py

      - name: üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        uses: actions/upload-artifact@v4
        with:
          name: inference-results
          path: |
            predictions.csv
            report.html

  publish:
    name: Build & Push Docker image to GHCR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üîÑ Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: üì• Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: model
          path: models

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/ildushalitov/cicd-summer-practice:latest

  deploy:
    name: üöÄ Deploy to Yandex Cloud
    needs: publish
    runs-on: ubuntu-latest
    env:
      YC_SA_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
      YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
      YC_SA_ID: ${{ secrets.YC_SA_ID }}
    steps:
      - name: üîÑ Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Yandex CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc --version

      - name: üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Yandex CLI
        run: |
          echo "$YC_SA_KEY" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"
          yc container registry configure-docker

      - name: üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        uses: actions/download-artifact@v4
        with:
          name: model
          path: models

      - name: üõ† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        run: |
          yc serverless container get --name cicd-summer-practice || \
          yc serverless container create --name cicd-summer-practice

      - name: üì¶ –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–∞
        run: |
          docker build -t cr.yandex/${{ env.YC_REGISTRY_ID }}/cicd-summer-practice:latest .

      - name: üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker-–æ–±—Ä–∞–∑–∞
        run: |
          docker push cr.yandex/${{ env.YC_REGISTRY_ID }}/cicd-summer-practice:latest

      - name: üöÄ –î–µ–ø–ª–æ–π –≤ Serverless Containers
        run: |
          yc serverless container revision deploy \
            --container-name cicd-summer-practice \
            --image cr.yandex/${{ env.YC_REGISTRY_ID }}/cicd-summer-practice:latest \
            --memory 512m \
            --cores 1 \
            --core-fraction 100 \
            --execution-timeout 30s \
            --concurrency 4 \
            --service-account-id "$YC_SA_ID"

      - name: üåç –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
        run: yc serverless container allow-unauthenticated-invoke cicd-summer-practice || true
