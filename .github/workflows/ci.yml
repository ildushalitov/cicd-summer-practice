name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[deploy]')"
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: üîÑ Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (flake8)
        run: |
          pip install flake8
          flake8 src tests

      - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (pytest)
        run: |
          pip install pytest
          pytest -s tests

      - name: ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (src/train.py)
        run: python src/train.py

      - name: üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        uses: actions/upload-artifact@v4
        with:
          name: model
          path: models/model.joblib

      - name: üîÆ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏ (src/inference.py)
        run: python src/inference.py

      - name: üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        uses: actions/upload-artifact@v4
        with:
          name: inference-results
          path: |
            predictions.csv
            report.html

  publish:
    if: "!contains(github.event.head_commit.message, '[deploy]')"
    name: Build & Push Docker image to GHCR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üîÑ Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: üì• Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: model
          path: models

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/ildushalitov/cicd-summer-practice:latest

  deploy:
    if: contains(github.event.head_commit.message, '[deploy]')
    name: üöÄ Deploy to Yandex Cloud
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "${HOME}/yandex-cloud/bin" >> $GITHUB_PATH

      - name: üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Yandex Cloud
        run: |
          echo '${{ secrets.YC_SA_JSON_KEY }}' > key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          yc config set service-account-key key.json

      - name: üîê –õ–æ–≥–∏–Ω –≤ Yandex Container Registry
        run: |
          yc container registry configure-docker

      - name: üè∑Ô∏è –ü–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É—à –≤ YCR
        run: |
          docker pull ghcr.io/ildushalitov/cicd-summer-practice:latest
          docker tag ghcr.io/ildushalitov/cicd-summer-practice:latest \
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/cicd-summer-practice:latest
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/cicd-summer-practice:latest

      - name: üöÄ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        run: |
          yc serverless container get --name inference-api || \
          yc serverless container create --name inference-api

          yc serverless container revision deploy \
            --container-name inference-api \
            --image cr.yandex/${{ secrets.YC_REGISTRY_ID }}/cicd-summer-practice:latest \
            --memory 2g \
            --cores 1 \
            --execution-timeout 30s \
            --concurrency 1 \
            --service-account-id ${{ secrets.YC_SA_ID }}


      - name: üåç –í—ã–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
        run: yc serverless container get --name inference-api --format json | jq -r '.url'



